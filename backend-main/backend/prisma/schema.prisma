// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  CUSTOMER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?  @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]
  passwordResetToken String? 
  passwordResetExpires DateTime?
  reviews   Review[]


}

model Booking {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  status    String
  startDate DateTime
  endDate   DateTime
  location     String
  createdAt DateTime @default(now())
  totalPrice  Float    @default(0)
}

model Vehicle {
  id           String   @id @default(uuid())
  title        String
  description  String
  brand        String
  model        String
  year         Int
  category     String // e.g., SUV, Sedan, Economy
  pricePerDay  Float
  pricePerHour Float?
  available    Boolean  @default(true)
  transmission String // e.g., Automatic, Manual
  fuelType     String // e.g., Petrol, Diesel, Electric
  features     String[] // e.g., ["AC", "Bluetooth", "GPS"]
  imageUrl     String? // Optional: for UI
  location     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Bookings (One-to-Many)
  bookings Booking[]
  reviews   Review[]
}


model Review {
  id         String   @id @default(uuid())
  rating     Int      // from 1 to 5
  comment    String?
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String
}